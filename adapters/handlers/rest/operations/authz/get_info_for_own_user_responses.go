//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// GetInfoForOwnUserOKCode is the HTTP code returned for type GetInfoForOwnUserOK
const GetInfoForOwnUserOKCode int = 200

/*
GetInfoForOwnUserOK Info about the own user

swagger:response getInfoForOwnUserOK
*/
type GetInfoForOwnUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewGetInfoForOwnUserOK creates GetInfoForOwnUserOK with default headers values
func NewGetInfoForOwnUserOK() *GetInfoForOwnUserOK {

	return &GetInfoForOwnUserOK{}
}

// WithPayload adds the payload to the get info for own user o k response
func (o *GetInfoForOwnUserOK) WithPayload(payload *models.User) *GetInfoForOwnUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get info for own user o k response
func (o *GetInfoForOwnUserOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetInfoForOwnUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetInfoForOwnUserUnauthorizedCode is the HTTP code returned for type GetInfoForOwnUserUnauthorized
const GetInfoForOwnUserUnauthorizedCode int = 401

/*
GetInfoForOwnUserUnauthorized Unauthorized or invalid credentials.

swagger:response getInfoForOwnUserUnauthorized
*/
type GetInfoForOwnUserUnauthorized struct {
}

// NewGetInfoForOwnUserUnauthorized creates GetInfoForOwnUserUnauthorized with default headers values
func NewGetInfoForOwnUserUnauthorized() *GetInfoForOwnUserUnauthorized {

	return &GetInfoForOwnUserUnauthorized{}
}

// WriteResponse to the client
func (o *GetInfoForOwnUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// GetInfoForOwnUserInternalServerErrorCode is the HTTP code returned for type GetInfoForOwnUserInternalServerError
const GetInfoForOwnUserInternalServerErrorCode int = 500

/*
GetInfoForOwnUserInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response getInfoForOwnUserInternalServerError
*/
type GetInfoForOwnUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetInfoForOwnUserInternalServerError creates GetInfoForOwnUserInternalServerError with default headers values
func NewGetInfoForOwnUserInternalServerError() *GetInfoForOwnUserInternalServerError {

	return &GetInfoForOwnUserInternalServerError{}
}

// WithPayload adds the payload to the get info for own user internal server error response
func (o *GetInfoForOwnUserInternalServerError) WithPayload(payload *models.ErrorResponse) *GetInfoForOwnUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get info for own user internal server error response
func (o *GetInfoForOwnUserInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetInfoForOwnUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
