//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/weaviate/weaviate/entities/models"
)

// NewTenantsCreateParams creates a new TenantsCreateParams object
//
// There are no default values defined in the spec.
func NewTenantsCreateParams() TenantsCreateParams {

	return TenantsCreateParams{}
}

// TenantsCreateParams contains all the bound params for the tenants create operation
// typically these are obtained from a http.Request
//
// swagger:parameters tenants.create
type TenantsCreateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	Body []*models.Tenant
	/*
	  Required: true
	  In: path
	*/
	ClassName string
	/*
	  In: query
	  Collection Format: csv
	*/
	StorageNodes []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTenantsCreateParams() beforehand.
func (o *TenantsCreateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body []*models.Tenant
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {

			// validate array of body objects
			for i := range body {
				if body[i] == nil {
					continue
				}
				if err := body[i].Validate(route.Formats); err != nil {
					res = append(res, err)
					break
				}
			}

			if len(res) == 0 {
				o.Body = body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	rClassName, rhkClassName, _ := route.Params.GetOK("className")
	if err := o.bindClassName(rClassName, rhkClassName, route.Formats); err != nil {
		res = append(res, err)
	}

	qStorageNodes, qhkStorageNodes, _ := qs.GetOK("storageNodes")
	if err := o.bindStorageNodes(qStorageNodes, qhkStorageNodes, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClassName binds and validates parameter ClassName from path.
func (o *TenantsCreateParams) bindClassName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClassName = raw

	return nil
}

// bindStorageNodes binds and validates array parameter StorageNodes from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *TenantsCreateParams) bindStorageNodes(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvStorageNodes string
	if len(rawData) > 0 {
		qvStorageNodes = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	storageNodesIC := swag.SplitByFormat(qvStorageNodes, "csv")
	if len(storageNodesIC) == 0 {
		return nil
	}

	var storageNodesIR []string
	for _, storageNodesIV := range storageNodesIC {
		storageNodesI := storageNodesIV

		storageNodesIR = append(storageNodesIR, storageNodesI)
	}

	o.StorageNodes = storageNodesIR

	return nil
}
