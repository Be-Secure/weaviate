//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/weaviate/weaviate/entities/models"
)

// PurgeReplicationsHandlerFunc turns a function with the right signature into a purge replications handler
type PurgeReplicationsHandlerFunc func(PurgeReplicationsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PurgeReplicationsHandlerFunc) Handle(params PurgeReplicationsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PurgeReplicationsHandler interface for that can handle valid purge replications params
type PurgeReplicationsHandler interface {
	Handle(PurgeReplicationsParams, *models.Principal) middleware.Responder
}

// NewPurgeReplications creates a new http.Handler for the purge replications operation
func NewPurgeReplications(ctx *middleware.Context, handler PurgeReplicationsHandler) *PurgeReplications {
	return &PurgeReplications{Context: ctx, Handler: handler}
}

/*
	PurgeReplications swagger:route POST /replication/replicate/purge replication purgeReplications

# Purge all replication operations

USE AT OWN RISK! Synchronously remove all operations from the FSM. This will not perform any checks on which state the operation is in so may lead to data corruption or loss.
*/
type PurgeReplications struct {
	Context *middleware.Context
	Handler PurgeReplicationsHandler
}

func (o *PurgeReplications) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPurgeReplicationsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
