// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: indices.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndicesService_PutObject_FullMethodName          = "/weaviate.handlers.indices.grpc.IndicesService/PutObject"
	IndicesService_BatchPutObjects_FullMethodName    = "/weaviate.handlers.indices.grpc.IndicesService/BatchPutObjects"
	IndicesService_GetObject_FullMethodName          = "/weaviate.handlers.indices.grpc.IndicesService/GetObject"
	IndicesService_DeleteObject_FullMethodName       = "/weaviate.handlers.indices.grpc.IndicesService/DeleteObject"
	IndicesService_BatchDeleteObjects_FullMethodName = "/weaviate.handlers.indices.grpc.IndicesService/BatchDeleteObjects"
	IndicesService_MergeObject_FullMethodName        = "/weaviate.handlers.indices.grpc.IndicesService/MergeObject"
	IndicesService_MultiGetObjects_FullMethodName    = "/weaviate.handlers.indices.grpc.IndicesService/MultiGetObjects"
	IndicesService_SearchShard_FullMethodName        = "/weaviate.handlers.indices.grpc.IndicesService/SearchShard"
	IndicesService_Aggregate_FullMethodName          = "/weaviate.handlers.indices.grpc.IndicesService/Aggregate"
	IndicesService_GetShardQueueSize_FullMethodName  = "/weaviate.handlers.indices.grpc.IndicesService/GetShardQueueSize"
	IndicesService_GetShardStatus_FullMethodName     = "/weaviate.handlers.indices.grpc.IndicesService/GetShardStatus"
	IndicesService_UpdateShardStatus_FullMethodName  = "/weaviate.handlers.indices.grpc.IndicesService/UpdateShardStatus"
	IndicesService_CreateShard_FullMethodName        = "/weaviate.handlers.indices.grpc.IndicesService/CreateShard"
	IndicesService_ReInitShard_FullMethodName        = "/weaviate.handlers.indices.grpc.IndicesService/ReInitShard"
)

// IndicesServiceClient is the client API for IndicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IndicesService provides operations for managing indices and shards
type IndicesServiceClient interface {
	// Object operations
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error)
	BatchPutObjects(ctx context.Context, in *BatchPutObjectsRequest, opts ...grpc.CallOption) (*BatchPutObjectsResponse, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	BatchDeleteObjects(ctx context.Context, in *BatchDeleteObjectsRequest, opts ...grpc.CallOption) (*BatchDeleteObjectsResponse, error)
	MergeObject(ctx context.Context, in *MergeObjectRequest, opts ...grpc.CallOption) (*MergeObjectResponse, error)
	MultiGetObjects(ctx context.Context, in *MultiGetObjectsRequest, opts ...grpc.CallOption) (*MultiGetObjectsResponse, error)
	// Search operations
	SearchShard(ctx context.Context, in *SearchShardRequest, opts ...grpc.CallOption) (*SearchShardResponse, error)
	Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error)
	// Shard operations
	GetShardQueueSize(ctx context.Context, in *GetShardQueueSizeRequest, opts ...grpc.CallOption) (*GetShardQueueSizeResponse, error)
	GetShardStatus(ctx context.Context, in *GetShardStatusRequest, opts ...grpc.CallOption) (*GetShardStatusResponse, error)
	UpdateShardStatus(ctx context.Context, in *UpdateShardStatusRequest, opts ...grpc.CallOption) (*UpdateShardStatusResponse, error)
	CreateShard(ctx context.Context, in *CreateShardRequest, opts ...grpc.CallOption) (*CreateShardResponse, error)
	ReInitShard(ctx context.Context, in *ReInitShardRequest, opts ...grpc.CallOption) (*ReInitShardResponse, error)
}

type indicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndicesServiceClient(cc grpc.ClientConnInterface) IndicesServiceClient {
	return &indicesServiceClient{cc}
}

func (c *indicesServiceClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutObjectResponse)
	err := c.cc.Invoke(ctx, IndicesService_PutObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) BatchPutObjects(ctx context.Context, in *BatchPutObjectsRequest, opts ...grpc.CallOption) (*BatchPutObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchPutObjectsResponse)
	err := c.cc.Invoke(ctx, IndicesService_BatchPutObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, IndicesService_GetObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, IndicesService_DeleteObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) BatchDeleteObjects(ctx context.Context, in *BatchDeleteObjectsRequest, opts ...grpc.CallOption) (*BatchDeleteObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteObjectsResponse)
	err := c.cc.Invoke(ctx, IndicesService_BatchDeleteObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) MergeObject(ctx context.Context, in *MergeObjectRequest, opts ...grpc.CallOption) (*MergeObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeObjectResponse)
	err := c.cc.Invoke(ctx, IndicesService_MergeObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) MultiGetObjects(ctx context.Context, in *MultiGetObjectsRequest, opts ...grpc.CallOption) (*MultiGetObjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiGetObjectsResponse)
	err := c.cc.Invoke(ctx, IndicesService_MultiGetObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) SearchShard(ctx context.Context, in *SearchShardRequest, opts ...grpc.CallOption) (*SearchShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchShardResponse)
	err := c.cc.Invoke(ctx, IndicesService_SearchShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregateResponse)
	err := c.cc.Invoke(ctx, IndicesService_Aggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) GetShardQueueSize(ctx context.Context, in *GetShardQueueSizeRequest, opts ...grpc.CallOption) (*GetShardQueueSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShardQueueSizeResponse)
	err := c.cc.Invoke(ctx, IndicesService_GetShardQueueSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) GetShardStatus(ctx context.Context, in *GetShardStatusRequest, opts ...grpc.CallOption) (*GetShardStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShardStatusResponse)
	err := c.cc.Invoke(ctx, IndicesService_GetShardStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) UpdateShardStatus(ctx context.Context, in *UpdateShardStatusRequest, opts ...grpc.CallOption) (*UpdateShardStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShardStatusResponse)
	err := c.cc.Invoke(ctx, IndicesService_UpdateShardStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) CreateShard(ctx context.Context, in *CreateShardRequest, opts ...grpc.CallOption) (*CreateShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShardResponse)
	err := c.cc.Invoke(ctx, IndicesService_CreateShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesServiceClient) ReInitShard(ctx context.Context, in *ReInitShardRequest, opts ...grpc.CallOption) (*ReInitShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReInitShardResponse)
	err := c.cc.Invoke(ctx, IndicesService_ReInitShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndicesServiceServer is the server API for IndicesService service.
// All implementations should embed UnimplementedIndicesServiceServer
// for forward compatibility.
//
// IndicesService provides operations for managing indices and shards
type IndicesServiceServer interface {
	// Object operations
	PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error)
	BatchPutObjects(context.Context, *BatchPutObjectsRequest) (*BatchPutObjectsResponse, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	BatchDeleteObjects(context.Context, *BatchDeleteObjectsRequest) (*BatchDeleteObjectsResponse, error)
	MergeObject(context.Context, *MergeObjectRequest) (*MergeObjectResponse, error)
	MultiGetObjects(context.Context, *MultiGetObjectsRequest) (*MultiGetObjectsResponse, error)
	// Search operations
	SearchShard(context.Context, *SearchShardRequest) (*SearchShardResponse, error)
	Aggregate(context.Context, *AggregateRequest) (*AggregateResponse, error)
	// Shard operations
	GetShardQueueSize(context.Context, *GetShardQueueSizeRequest) (*GetShardQueueSizeResponse, error)
	GetShardStatus(context.Context, *GetShardStatusRequest) (*GetShardStatusResponse, error)
	UpdateShardStatus(context.Context, *UpdateShardStatusRequest) (*UpdateShardStatusResponse, error)
	CreateShard(context.Context, *CreateShardRequest) (*CreateShardResponse, error)
	ReInitShard(context.Context, *ReInitShardRequest) (*ReInitShardResponse, error)
}

// UnimplementedIndicesServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndicesServiceServer struct{}

func (UnimplementedIndicesServiceServer) PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedIndicesServiceServer) BatchPutObjects(context.Context, *BatchPutObjectsRequest) (*BatchPutObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPutObjects not implemented")
}
func (UnimplementedIndicesServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedIndicesServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedIndicesServiceServer) BatchDeleteObjects(context.Context, *BatchDeleteObjectsRequest) (*BatchDeleteObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteObjects not implemented")
}
func (UnimplementedIndicesServiceServer) MergeObject(context.Context, *MergeObjectRequest) (*MergeObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeObject not implemented")
}
func (UnimplementedIndicesServiceServer) MultiGetObjects(context.Context, *MultiGetObjectsRequest) (*MultiGetObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetObjects not implemented")
}
func (UnimplementedIndicesServiceServer) SearchShard(context.Context, *SearchShardRequest) (*SearchShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchShard not implemented")
}
func (UnimplementedIndicesServiceServer) Aggregate(context.Context, *AggregateRequest) (*AggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedIndicesServiceServer) GetShardQueueSize(context.Context, *GetShardQueueSizeRequest) (*GetShardQueueSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardQueueSize not implemented")
}
func (UnimplementedIndicesServiceServer) GetShardStatus(context.Context, *GetShardStatusRequest) (*GetShardStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardStatus not implemented")
}
func (UnimplementedIndicesServiceServer) UpdateShardStatus(context.Context, *UpdateShardStatusRequest) (*UpdateShardStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShardStatus not implemented")
}
func (UnimplementedIndicesServiceServer) CreateShard(context.Context, *CreateShardRequest) (*CreateShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShard not implemented")
}
func (UnimplementedIndicesServiceServer) ReInitShard(context.Context, *ReInitShardRequest) (*ReInitShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReInitShard not implemented")
}
func (UnimplementedIndicesServiceServer) testEmbeddedByValue() {}

// UnsafeIndicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndicesServiceServer will
// result in compilation errors.
type UnsafeIndicesServiceServer interface {
	mustEmbedUnimplementedIndicesServiceServer()
}

func RegisterIndicesServiceServer(s grpc.ServiceRegistrar, srv IndicesServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndicesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndicesService_ServiceDesc, srv)
}

func _IndicesService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_PutObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_BatchPutObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchPutObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).BatchPutObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_BatchPutObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).BatchPutObjects(ctx, req.(*BatchPutObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_BatchDeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).BatchDeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_BatchDeleteObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).BatchDeleteObjects(ctx, req.(*BatchDeleteObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_MergeObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).MergeObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_MergeObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).MergeObject(ctx, req.(*MergeObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_MultiGetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).MultiGetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_MultiGetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).MultiGetObjects(ctx, req.(*MultiGetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_SearchShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).SearchShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_SearchShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).SearchShard(ctx, req.(*SearchShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_Aggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).Aggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_GetShardQueueSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardQueueSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).GetShardQueueSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_GetShardQueueSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).GetShardQueueSize(ctx, req.(*GetShardQueueSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_GetShardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).GetShardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_GetShardStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).GetShardStatus(ctx, req.(*GetShardStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_UpdateShardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).UpdateShardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_UpdateShardStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).UpdateShardStatus(ctx, req.(*UpdateShardStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_CreateShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).CreateShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_CreateShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).CreateShard(ctx, req.(*CreateShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndicesService_ReInitShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReInitShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServiceServer).ReInitShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndicesService_ReInitShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServiceServer).ReInitShard(ctx, req.(*ReInitShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndicesService_ServiceDesc is the grpc.ServiceDesc for IndicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weaviate.handlers.indices.grpc.IndicesService",
	HandlerType: (*IndicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _IndicesService_PutObject_Handler,
		},
		{
			MethodName: "BatchPutObjects",
			Handler:    _IndicesService_BatchPutObjects_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _IndicesService_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _IndicesService_DeleteObject_Handler,
		},
		{
			MethodName: "BatchDeleteObjects",
			Handler:    _IndicesService_BatchDeleteObjects_Handler,
		},
		{
			MethodName: "MergeObject",
			Handler:    _IndicesService_MergeObject_Handler,
		},
		{
			MethodName: "MultiGetObjects",
			Handler:    _IndicesService_MultiGetObjects_Handler,
		},
		{
			MethodName: "SearchShard",
			Handler:    _IndicesService_SearchShard_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _IndicesService_Aggregate_Handler,
		},
		{
			MethodName: "GetShardQueueSize",
			Handler:    _IndicesService_GetShardQueueSize_Handler,
		},
		{
			MethodName: "GetShardStatus",
			Handler:    _IndicesService_GetShardStatus_Handler,
		},
		{
			MethodName: "UpdateShardStatus",
			Handler:    _IndicesService_UpdateShardStatus_Handler,
		},
		{
			MethodName: "CreateShard",
			Handler:    _IndicesService_CreateShard_Handler,
		},
		{
			MethodName: "ReInitShard",
			Handler:    _IndicesService_ReInitShard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indices.proto",
}
