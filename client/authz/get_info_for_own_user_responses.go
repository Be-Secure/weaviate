//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// GetInfoForOwnUserReader is a Reader for the GetInfoForOwnUser structure.
type GetInfoForOwnUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInfoForOwnUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInfoForOwnUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetInfoForOwnUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInfoForOwnUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInfoForOwnUserOK creates a GetInfoForOwnUserOK with default headers values
func NewGetInfoForOwnUserOK() *GetInfoForOwnUserOK {
	return &GetInfoForOwnUserOK{}
}

/*
GetInfoForOwnUserOK describes a response with status code 200, with default header values.

Info about the own user
*/
type GetInfoForOwnUserOK struct {
	Payload *models.User
}

// IsSuccess returns true when this get info for own user o k response has a 2xx status code
func (o *GetInfoForOwnUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get info for own user o k response has a 3xx status code
func (o *GetInfoForOwnUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get info for own user o k response has a 4xx status code
func (o *GetInfoForOwnUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get info for own user o k response has a 5xx status code
func (o *GetInfoForOwnUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get info for own user o k response a status code equal to that given
func (o *GetInfoForOwnUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get info for own user o k response
func (o *GetInfoForOwnUserOK) Code() int {
	return 200
}

func (o *GetInfoForOwnUserOK) Error() string {
	return fmt.Sprintf("[GET /authz/users/own-info][%d] getInfoForOwnUserOK  %+v", 200, o.Payload)
}

func (o *GetInfoForOwnUserOK) String() string {
	return fmt.Sprintf("[GET /authz/users/own-info][%d] getInfoForOwnUserOK  %+v", 200, o.Payload)
}

func (o *GetInfoForOwnUserOK) GetPayload() *models.User {
	return o.Payload
}

func (o *GetInfoForOwnUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfoForOwnUserUnauthorized creates a GetInfoForOwnUserUnauthorized with default headers values
func NewGetInfoForOwnUserUnauthorized() *GetInfoForOwnUserUnauthorized {
	return &GetInfoForOwnUserUnauthorized{}
}

/*
GetInfoForOwnUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type GetInfoForOwnUserUnauthorized struct {
}

// IsSuccess returns true when this get info for own user unauthorized response has a 2xx status code
func (o *GetInfoForOwnUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get info for own user unauthorized response has a 3xx status code
func (o *GetInfoForOwnUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get info for own user unauthorized response has a 4xx status code
func (o *GetInfoForOwnUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get info for own user unauthorized response has a 5xx status code
func (o *GetInfoForOwnUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get info for own user unauthorized response a status code equal to that given
func (o *GetInfoForOwnUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get info for own user unauthorized response
func (o *GetInfoForOwnUserUnauthorized) Code() int {
	return 401
}

func (o *GetInfoForOwnUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /authz/users/own-info][%d] getInfoForOwnUserUnauthorized ", 401)
}

func (o *GetInfoForOwnUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /authz/users/own-info][%d] getInfoForOwnUserUnauthorized ", 401)
}

func (o *GetInfoForOwnUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInfoForOwnUserInternalServerError creates a GetInfoForOwnUserInternalServerError with default headers values
func NewGetInfoForOwnUserInternalServerError() *GetInfoForOwnUserInternalServerError {
	return &GetInfoForOwnUserInternalServerError{}
}

/*
GetInfoForOwnUserInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type GetInfoForOwnUserInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get info for own user internal server error response has a 2xx status code
func (o *GetInfoForOwnUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get info for own user internal server error response has a 3xx status code
func (o *GetInfoForOwnUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get info for own user internal server error response has a 4xx status code
func (o *GetInfoForOwnUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get info for own user internal server error response has a 5xx status code
func (o *GetInfoForOwnUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get info for own user internal server error response a status code equal to that given
func (o *GetInfoForOwnUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get info for own user internal server error response
func (o *GetInfoForOwnUserInternalServerError) Code() int {
	return 500
}

func (o *GetInfoForOwnUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /authz/users/own-info][%d] getInfoForOwnUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInfoForOwnUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /authz/users/own-info][%d] getInfoForOwnUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInfoForOwnUserInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInfoForOwnUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
