//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package revectorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// RevectorizationReader is a Reader for the Revectorization structure.
type RevectorizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevectorizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRevectorizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRevectorizationOK creates a RevectorizationOK with default headers values
func NewRevectorizationOK() *RevectorizationOK {
	return &RevectorizationOK{}
}

/*
RevectorizationOK describes a response with status code 200, with default header values.

Revectorization process successfully started
*/
type RevectorizationOK struct {
	Payload *models.RevectorizationStatusResponse
}

// IsSuccess returns true when this revectorization o k response has a 2xx status code
func (o *RevectorizationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revectorization o k response has a 3xx status code
func (o *RevectorizationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revectorization o k response has a 4xx status code
func (o *RevectorizationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this revectorization o k response has a 5xx status code
func (o *RevectorizationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this revectorization o k response a status code equal to that given
func (o *RevectorizationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the revectorization o k response
func (o *RevectorizationOK) Code() int {
	return 200
}

func (o *RevectorizationOK) Error() string {
	return fmt.Sprintf("[POST /revectorization/{collectionName}/{targetVector}][%d] revectorizationOK  %+v", 200, o.Payload)
}

func (o *RevectorizationOK) String() string {
	return fmt.Sprintf("[POST /revectorization/{collectionName}/{targetVector}][%d] revectorizationOK  %+v", 200, o.Payload)
}

func (o *RevectorizationOK) GetPayload() *models.RevectorizationStatusResponse {
	return o.Payload
}

func (o *RevectorizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RevectorizationStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
