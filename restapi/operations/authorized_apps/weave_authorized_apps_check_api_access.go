package authorized_apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaveAuthorizedAppsCheckAPIAccessHandlerFunc turns a function with the right signature into a weave authorized apps check Api access handler
type WeaveAuthorizedAppsCheckAPIAccessHandlerFunc func(WeaveAuthorizedAppsCheckAPIAccessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaveAuthorizedAppsCheckAPIAccessHandlerFunc) Handle(params WeaveAuthorizedAppsCheckAPIAccessParams) middleware.Responder {
	return fn(params)
}

// WeaveAuthorizedAppsCheckAPIAccessHandler interface for that can handle valid weave authorized apps check Api access params
type WeaveAuthorizedAppsCheckAPIAccessHandler interface {
	Handle(WeaveAuthorizedAppsCheckAPIAccessParams) middleware.Responder
}

// NewWeaveAuthorizedAppsCheckAPIAccess creates a new http.Handler for the weave authorized apps check Api access operation
func NewWeaveAuthorizedAppsCheckAPIAccess(ctx *middleware.Context, handler WeaveAuthorizedAppsCheckAPIAccessHandler) *WeaveAuthorizedAppsCheckAPIAccess {
	return &WeaveAuthorizedAppsCheckAPIAccess{Context: ctx, Handler: handler}
}

/*WeaveAuthorizedAppsCheckAPIAccess swagger:route POST /authorizedApps/checkApiAccess authorizedApps weaveAuthorizedAppsCheckApiAccess

Check whether the calling user has access to the Weave API.

*/
type WeaveAuthorizedAppsCheckAPIAccess struct {
	Context *middleware.Context
	Handler WeaveAuthorizedAppsCheckAPIAccessHandler
}

func (o *WeaveAuthorizedAppsCheckAPIAccess) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWeaveAuthorizedAppsCheckAPIAccessParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
