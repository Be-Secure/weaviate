package labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaveLabelsModifyHandlerFunc turns a function with the right signature into a weave labels modify handler
type WeaveLabelsModifyHandlerFunc func(WeaveLabelsModifyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaveLabelsModifyHandlerFunc) Handle(params WeaveLabelsModifyParams) middleware.Responder {
	return fn(params)
}

// WeaveLabelsModifyHandler interface for that can handle valid weave labels modify params
type WeaveLabelsModifyHandler interface {
	Handle(WeaveLabelsModifyParams) middleware.Responder
}

// NewWeaveLabelsModify creates a new http.Handler for the weave labels modify operation
func NewWeaveLabelsModify(ctx *middleware.Context, handler WeaveLabelsModifyHandler) *WeaveLabelsModify {
	return &WeaveLabelsModify{Context: ctx, Handler: handler}
}

/*WeaveLabelsModify swagger:route POST /places/{placeId}/labels/{labelId}/modify labels weaveLabelsModify

Updates a label.

*/
type WeaveLabelsModify struct {
	Context *middleware.Context
	Handler WeaveLabelsModifyHandler
}

func (o *WeaveLabelsModify) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWeaveLabelsModifyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
