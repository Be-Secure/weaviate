package labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaveLabelsDeleteHandlerFunc turns a function with the right signature into a weave labels delete handler
type WeaveLabelsDeleteHandlerFunc func(WeaveLabelsDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaveLabelsDeleteHandlerFunc) Handle(params WeaveLabelsDeleteParams) middleware.Responder {
	return fn(params)
}

// WeaveLabelsDeleteHandler interface for that can handle valid weave labels delete params
type WeaveLabelsDeleteHandler interface {
	Handle(WeaveLabelsDeleteParams) middleware.Responder
}

// NewWeaveLabelsDelete creates a new http.Handler for the weave labels delete operation
func NewWeaveLabelsDelete(ctx *middleware.Context, handler WeaveLabelsDeleteHandler) *WeaveLabelsDelete {
	return &WeaveLabelsDelete{Context: ctx, Handler: handler}
}

/*WeaveLabelsDelete swagger:route DELETE /places/{placeId}/labels/{labelId} labels weaveLabelsDelete

Deletes a label.

*/
type WeaveLabelsDelete struct {
	Context *middleware.Context
	Handler WeaveLabelsDeleteHandler
}

func (o *WeaveLabelsDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWeaveLabelsDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
