package labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WeaveLabelsCreateHandlerFunc turns a function with the right signature into a weave labels create handler
type WeaveLabelsCreateHandlerFunc func(WeaveLabelsCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WeaveLabelsCreateHandlerFunc) Handle(params WeaveLabelsCreateParams) middleware.Responder {
	return fn(params)
}

// WeaveLabelsCreateHandler interface for that can handle valid weave labels create params
type WeaveLabelsCreateHandler interface {
	Handle(WeaveLabelsCreateParams) middleware.Responder
}

// NewWeaveLabelsCreate creates a new http.Handler for the weave labels create operation
func NewWeaveLabelsCreate(ctx *middleware.Context, handler WeaveLabelsCreateHandler) *WeaveLabelsCreate {
	return &WeaveLabelsCreate{Context: ctx, Handler: handler}
}

/*WeaveLabelsCreate swagger:route POST /places/{placeId}/labels/create labels weaveLabelsCreate

Creates a new label.

*/
type WeaveLabelsCreate struct {
	Context *middleware.Context
	Handler WeaveLabelsCreateHandler
}

func (o *WeaveLabelsCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWeaveLabelsCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
