// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeaviateClient is the client API for Weaviate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeaviateClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	BatchObjects(ctx context.Context, in *BatchObjectsRequest, opts ...grpc.CallOption) (*BatchObjectsReply, error)
	BatchDelete(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteReply, error)
	TenantsGet(ctx context.Context, in *TenantsGetRequest, opts ...grpc.CallOption) (*TenantsGetReply, error)
	Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateReply, error)
	BatchWrite(ctx context.Context, opts ...grpc.CallOption) (Weaviate_BatchWriteClient, error)
	BatchRead(ctx context.Context, in *BatchReadRequest, opts ...grpc.CallOption) (Weaviate_BatchReadClient, error)
}

type weaviateClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaviateClient(cc grpc.ClientConnInterface) WeaviateClient {
	return &weaviateClient{cc}
}

func (c *weaviateClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/weaviate.v1.Weaviate/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaviateClient) BatchObjects(ctx context.Context, in *BatchObjectsRequest, opts ...grpc.CallOption) (*BatchObjectsReply, error) {
	out := new(BatchObjectsReply)
	err := c.cc.Invoke(ctx, "/weaviate.v1.Weaviate/BatchObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaviateClient) BatchDelete(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteReply, error) {
	out := new(BatchDeleteReply)
	err := c.cc.Invoke(ctx, "/weaviate.v1.Weaviate/BatchDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaviateClient) TenantsGet(ctx context.Context, in *TenantsGetRequest, opts ...grpc.CallOption) (*TenantsGetReply, error) {
	out := new(TenantsGetReply)
	err := c.cc.Invoke(ctx, "/weaviate.v1.Weaviate/TenantsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaviateClient) Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateReply, error) {
	out := new(AggregateReply)
	err := c.cc.Invoke(ctx, "/weaviate.v1.Weaviate/Aggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaviateClient) BatchWrite(ctx context.Context, opts ...grpc.CallOption) (Weaviate_BatchWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weaviate_ServiceDesc.Streams[0], "/weaviate.v1.Weaviate/BatchWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &weaviateBatchWriteClient{stream}
	return x, nil
}

type Weaviate_BatchWriteClient interface {
	Send(*BatchMessage) error
	CloseAndRecv() (*BatchWriteReply, error)
	grpc.ClientStream
}

type weaviateBatchWriteClient struct {
	grpc.ClientStream
}

func (x *weaviateBatchWriteClient) Send(m *BatchMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weaviateBatchWriteClient) CloseAndRecv() (*BatchWriteReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchWriteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weaviateClient) BatchRead(ctx context.Context, in *BatchReadRequest, opts ...grpc.CallOption) (Weaviate_BatchReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weaviate_ServiceDesc.Streams[1], "/weaviate.v1.Weaviate/BatchRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &weaviateBatchReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weaviate_BatchReadClient interface {
	Recv() (*BatchError, error)
	grpc.ClientStream
}

type weaviateBatchReadClient struct {
	grpc.ClientStream
}

func (x *weaviateBatchReadClient) Recv() (*BatchError, error) {
	m := new(BatchError)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WeaviateServer is the server API for Weaviate service.
// All implementations must embed UnimplementedWeaviateServer
// for forward compatibility
type WeaviateServer interface {
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	BatchObjects(context.Context, *BatchObjectsRequest) (*BatchObjectsReply, error)
	BatchDelete(context.Context, *BatchDeleteRequest) (*BatchDeleteReply, error)
	TenantsGet(context.Context, *TenantsGetRequest) (*TenantsGetReply, error)
	Aggregate(context.Context, *AggregateRequest) (*AggregateReply, error)
	BatchWrite(Weaviate_BatchWriteServer) error
	BatchRead(*BatchReadRequest, Weaviate_BatchReadServer) error
	mustEmbedUnimplementedWeaviateServer()
}

// UnimplementedWeaviateServer must be embedded to have forward compatible implementations.
type UnimplementedWeaviateServer struct {
}

func (UnimplementedWeaviateServer) Search(context.Context, *SearchRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedWeaviateServer) BatchObjects(context.Context, *BatchObjectsRequest) (*BatchObjectsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchObjects not implemented")
}
func (UnimplementedWeaviateServer) BatchDelete(context.Context, *BatchDeleteRequest) (*BatchDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDelete not implemented")
}
func (UnimplementedWeaviateServer) TenantsGet(context.Context, *TenantsGetRequest) (*TenantsGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantsGet not implemented")
}
func (UnimplementedWeaviateServer) Aggregate(context.Context, *AggregateRequest) (*AggregateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedWeaviateServer) BatchWrite(Weaviate_BatchWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchWrite not implemented")
}
func (UnimplementedWeaviateServer) BatchRead(*BatchReadRequest, Weaviate_BatchReadServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchRead not implemented")
}
func (UnimplementedWeaviateServer) mustEmbedUnimplementedWeaviateServer() {}

// UnsafeWeaviateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaviateServer will
// result in compilation errors.
type UnsafeWeaviateServer interface {
	mustEmbedUnimplementedWeaviateServer()
}

func RegisterWeaviateServer(s grpc.ServiceRegistrar, srv WeaviateServer) {
	s.RegisterService(&Weaviate_ServiceDesc, srv)
}

func _Weaviate_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaviateServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.Weaviate/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaviateServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weaviate_BatchObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaviateServer).BatchObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.Weaviate/BatchObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaviateServer).BatchObjects(ctx, req.(*BatchObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weaviate_BatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaviateServer).BatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.Weaviate/BatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaviateServer).BatchDelete(ctx, req.(*BatchDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weaviate_TenantsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaviateServer).TenantsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.Weaviate/TenantsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaviateServer).TenantsGet(ctx, req.(*TenantsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weaviate_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaviateServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weaviate.v1.Weaviate/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaviateServer).Aggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weaviate_BatchWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeaviateServer).BatchWrite(&weaviateBatchWriteServer{stream})
}

type Weaviate_BatchWriteServer interface {
	SendAndClose(*BatchWriteReply) error
	Recv() (*BatchMessage, error)
	grpc.ServerStream
}

type weaviateBatchWriteServer struct {
	grpc.ServerStream
}

func (x *weaviateBatchWriteServer) SendAndClose(m *BatchWriteReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weaviateBatchWriteServer) Recv() (*BatchMessage, error) {
	m := new(BatchMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Weaviate_BatchRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeaviateServer).BatchRead(m, &weaviateBatchReadServer{stream})
}

type Weaviate_BatchReadServer interface {
	Send(*BatchError) error
	grpc.ServerStream
}

type weaviateBatchReadServer struct {
	grpc.ServerStream
}

func (x *weaviateBatchReadServer) Send(m *BatchError) error {
	return x.ServerStream.SendMsg(m)
}

// Weaviate_ServiceDesc is the grpc.ServiceDesc for Weaviate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weaviate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weaviate.v1.Weaviate",
	HandlerType: (*WeaviateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Weaviate_Search_Handler,
		},
		{
			MethodName: "BatchObjects",
			Handler:    _Weaviate_BatchObjects_Handler,
		},
		{
			MethodName: "BatchDelete",
			Handler:    _Weaviate_BatchDelete_Handler,
		},
		{
			MethodName: "TenantsGet",
			Handler:    _Weaviate_TenantsGet_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _Weaviate_Aggregate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchWrite",
			Handler:       _Weaviate_BatchWrite_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchRead",
			Handler:       _Weaviate_BatchRead_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/weaviate.proto",
}
